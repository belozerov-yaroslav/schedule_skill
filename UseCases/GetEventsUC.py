from UseCases.utc_time import get_zone_time
from UseCases.UseCase import UseCase
from datetime import datetime
from exceptions import *


class GetEventsUC(UseCase):  # –≤—ã–≤–æ–¥–∏—Ç –≤—Å–µ event –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –¥–∞—Ç—É
    def get(self):
        user = self.repository.get_user(self.message.user_id())
        all_events = self.repository.get_user_events(user)
        try:
            events = self.get_by_date(all_events)
        except NoTimeException:
            self.message.set_text('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª–∞ —Ç–æ–≥–æ, –Ω–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.')
            return
        time_now = get_zone_time(datetime.now(), self.message.timezone())
        next_event = True
        send_text = '–í—ã —Ö–æ—Ç–µ–ª–∏:\n'
        if self.message.get_datetime().date() == time_now.date():
            for event in events:
                event.date = get_zone_time(event.date, self.message.timezone())
                if event.date.time() < time_now.time():
                    send_text += 'üü¢ ' + str(event) + '\n'  # event —É–∂–µ –ø—Ä–æ—à–µ–ª
                if event.date.time() >= time_now.time():
                    if next_event:
                        send_text += '‚ö™ ' + str(event) + '\n'  # —Å–ª–µ–¥—É—â–∏–π event
                        next_event = False
                    else:
                        send_text += 'üü° ' + str(event) + '\n'  # event –≤ –±—É–¥—É—â–µ–º
        else:
            for event in events:
                send_text += 'üü° ' + str(event) + '\n'
        self.message.set_text(send_text.rstrip())
        return

    def get_by_date(self, events):  # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ event –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É
        return list(sorted(self.simple_periodicity(events) + self.periodicity_by_weekday(events),
                           key=lambda x: x.date))

    def periodicity_by_weekday(self, events):
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö event, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥—Ö–æ–¥—è—Ç –∫ –¥–∞—Ç–µ –ø–æ –ø–µ—Ä–µ–æ–¥–∏—á–Ω–æ—Å—Ç–∏
        date = self.message.get_datetime()
        needed_events_by_weekday = filter(lambda x: x.periodicity == 2 and
                                                    int(self.repository.get_event_description(x).text) - 1 ==
                                                    date.weekday(),
                                          events)
        return list(needed_events_by_weekday)

    def simple_periodicity(self, events):  # –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ event —Å –Ω—É–∂–Ω–æ–π –¥–∞—Ç–æ–π
        date = self.message.get_datetime()
        needed_events_by_date = filter(lambda x: x.periodicity == 0 and
                                                 x.date.day == date.day and
                                                 x.date.month == date.month and
                                                 x.date.year == date.year, events)
        return list(needed_events_by_date)
